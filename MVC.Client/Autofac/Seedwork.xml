<?xml version="1.0" encoding="utf-8" ?>
    <!--
      instanceScope值
      
      InstancePerDependency per-dependency
      对每一个依赖或每一次调用创建一个新的唯一的实例。这也是默认的创建实例的方式。
      InstancePerLifetimeScope per-lifetime-scope
      在一个生命周期域中，每一个依赖或调用创建一个单一的共享的实例，且每一个不同的生命周期域，实例是唯一的，不共享的。
      InstancePerMatchingLifetimeScope per-matching-lifetime-scope
      在一个做标识的生命周期域中，每一个依赖或调用创建一个单一的共享的实例。打了标识了的生命周期域中的子标识域中可以共享父级域中的实例。若在整个继承层次中没有找到打标识的生命周期域，则会抛出异常：DependencyResolutionException。
      InstancePerOwned
      在一个生命周期域中所拥有的实例创建的生命周期中，每一个依赖组件或调用Resolve()方法创建一个单一的共享的实例，并且子生命周期域共享父生命周期域中的实例。若在继承层级中没有发现合适的拥有子实例的生命周期域，则抛出异常：DependencyResolutionException。
      SingleInstance
      每一次依赖组件或调用Resolve()方法都会得到一个相同的共享的实例。其实就是单例模式。
      InstancePerHttpRequest
      在一次Http请求上下文中,共享一个组件实例。仅适用于asp.net mvc开发。
    -->
<Application>
  <components name="MainUnitOfWork">
    <type>LMS.Infrastructure.Seedwork.MainUnitOfWork,Infrastructure.Seedwork</type>
    <injectProperties>true</injectProperties> 
    <instanceScope>per-lifetime-scope</instanceScope>
  </components>
  <components name="ReadUnitOfWork">
    <type>LMS.Infrastructure.Seedwork.ReadUnitOfWork,Infrastructure.Seedwork</type>
    <services name="ReadUnitOfWork" type="LMS.Domain.Seedwork.IReadUnitOfWork,Domain.Seedwork" />
    <injectProperties>true</injectProperties>
  </components>
  <!--<components name="Cache">
    <type>LMS.Application.Seedwork.Cache.Redis,Application.Seedwork</type>
    <services name="Cache" type="LMS.Application.Seedwork.Cache.ICache,Application.Seedwork" />
    <injectProperties>true</injectProperties>
  </components>-->
</Application>
